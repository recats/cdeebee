{"version":3,"file":"index.js","sources":["../node_modules/nanoid/random.js","../node_modules/nanoid/format.js","../node_modules/nanoid/generate.js"],"sourcesContent":["var crypto = require('crypto')\n\nif (crypto.randomFillSync) {\n  var buffers = { }\n  module.exports = function (bytes) {\n    var buffer = buffers[bytes]\n    if (!buffer) {\n      buffer = Buffer.allocUnsafe(bytes)\n      if (bytes <= 255) buffers[bytes] = buffer\n    }\n    return crypto.randomFillSync(buffer)\n  }\n} else {\n  module.exports = crypto.randomBytes\n}\n","/**\n * Secure random string generator with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {generator} random The random bytes generator.\n * @param {string} alphabet Symbols to be used in new random string.\n * @param {size} size The number of symbols in new random string.\n *\n * @return {string} Random string.\n *\n * @example\n * const format = require('nanoid/format')\n *\n * function random (size) {\n *   const result = []\n *   for (let i = 0; i < size; i++) {\n *     result.push(randomByte())\n *   }\n *   return result\n * }\n *\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\n *\n * @name format\n * @function\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n  size = +size\n\n  var id = ''\n  while (true) {\n    var bytes = random(step)\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask\n      if (alphabet[byte]) {\n        id += alphabet[byte]\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\n/**\n * @callback generator\n * @param {number} bytes The number of bytes to generate.\n * @return {number[]} Random bytes.\n */\n","var random = require('./random')\nvar format = require('./format')\n\n/**\n * Low-level function to change alphabet and ID size.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param {string} alphabet Symbols to be used in ID.\n * @param {number} size The number of symbols in ID.\n *\n * @return {string} Unique ID.\n *\n * @example\n * const generate = require('nanoid/generate')\n * model.id = generate('0123456789абвгдеё', 5) //=> \"8ё56а\"\n *\n * @name generate\n * @function\n */\nmodule.exports = function (alphabet, size) {\n  return format(random, alphabet, size)\n}\n"],"names":["crypto","randomFillSync","buffers","module","bytes","buffer","Buffer","allocUnsafe","randomBytes","random","alphabet","size","mask","Math","log","length","LN2","step","ceil","id","i","byte","format"],"mappings":"8qOAEA,GAAIA,OAAOC,eAAgB,KACrBC,EAAU,GACdC,UAAiB,SAAUC,OACrBC,EAASH,EAAQE,UAChBC,IACHA,EAASC,OAAOC,YAAYH,GACxBA,GAAS,MAAKF,EAAQE,GAASC,IAE9BL,OAAOC,eAAeI,SAG/BF,UAAiBH,OAAOQ,qBCeT,SAAUC,EAAQC,EAAUC,OACvCC,GAAQ,GAAKC,KAAKC,IAAIJ,EAASK,OAAS,GAAKF,KAAKG,KAAO,EACzDC,EAAOJ,KAAKK,KAAK,IAAMN,EAAOD,EAAOD,EAASK,QAClDJ,GAAQA,UAEJQ,EAAK,aAEHf,EAAQK,EAAOQ,GACVG,EAAI,EAAGA,EAAIH,EAAMG,IAAK,KACzBC,EAAOjB,EAAMgB,GAAKR,KAClBF,EAASW,KACXF,GAAMT,EAASW,IACRN,SAAWJ,EAAM,OAAOQ,aCnBtB,SAAUT,EAAUC,UAC5BW,OAAOb,OAAQC,EAAUC"}